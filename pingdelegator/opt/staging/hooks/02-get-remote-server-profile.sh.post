#!/usr/bin/env sh
# Copyright Â© 2025 Ping Identity Corporation

#
# Ping Identity DevOps - Docker Build Hooks
#
#- This hook may be used to set the server if there is a setup procedure
#
#- >Note: The PingData (i.e. Directory, DataSync, PingAuthorize, DirectoryProxy)
#- products will all provide this

# shellcheck source=../../../../pingcommon/opt/staging/hooks/pingcommon.lib.sh
. "${HOOKS_DIR}/pingcommon.lib.sh"

#
# Following is provided to support existing implementations using legacy certificate locations
_legacyCertificateFile="${STAGING_DIR}/.sec/nginx.crt"
_legacyCertificateKeyFile="${STAGING_DIR}/.sec/nginx.key"

#used for FIPS purposes
_osID=$(awk '$0~/^ID=/ {split($1,id,"="); gsub(/"/,"",id[2]); print id[2];}' < /etc/os-release 2> /dev/null)

if test ! -r "${SECRETS_DIR}"; then
    echo_yellow "WARNING: Important that the orchestration environment create a tmpfs for '${SECRETS_DIR}'"
    echo_yellow "         Using '/tmp/secrets' for now."
    SECRETS_DIR="/tmp/secrets"
    mkdir -p "${SECRETS_DIR}"
fi

# Get the certificate and key if they are provided
if test -n "${CERTIFICATE_FILE}"; then
    if ! test -f "${CERTIFICATE_FILE}"; then
        container_failure 2 "CERTIFICATE_FILE value [${CERTIFICATE_FILE}] is invalid: the specified file does not exist"
    else
        _nginxCrt="${CERTIFICATE_FILE}"

    fi
else
    if test -f "${_legacyCertificateFile}"; then
        echo "WARNING: Using a legacy location for certificate '${_legacyCertificateFile}'"
        echo "         Consider moving to a vault secret location"
        _nginxCrt="${_legacyCertificateFile}"
    else
        if ! test -w "${SECRETS_DIR}"; then
            SECRETS_DIR="/tmp/secrets"
            mkdir -p "${SECRETS_DIR}"
        fi
        _nginxCrt="${SECRETS_DIR}/nginx.crt"
    fi
fi

if test -n "${CERTIFICATE_KEY_FILE}"; then
    if ! test -f "${CERTIFICATE_KEY_FILE}"; then
        container_failure 2 "CERTIFICATE_KEY_FILE value [${CERTIFICATE_KEY_FILE}] is invalid: the specified file does not exist"
    else
        _nginxKey="${CERTIFICATE_KEY_FILE}"
    fi
else
    if test -f "${_legacyCertificateKeyFile}"; then
        echo "WARNING: Using a legacy location for certificate key file '${_legacyCertificateKeyFile}'"
        echo "         Consider moving to a vault secret location"
        _nginxKey="${_legacyCertificateKeyFile}"
    else
        _nginxKey="${SECRETS_DIR}/nginx.key"
    fi
fi

if ! test -f "${_nginxCrt}"; then
    _sans="DNS:localhost, IP:127.0.0.1"
    _lcHostname=$(toLower "${PD_DELEGATOR_PUBLIC_HOSTNAME}")
    if test -n "${PD_DELEGATOR_PUBLIC_HOSTNAME}" && test "${_lcHostname}" != "localhost"; then
        _sans="DNS: ${PD_DELEGATOR_PUBLIC_HOSTNAME}, ${_sans}"
    fi
    openssl req \
        -x509 \
        -nodes \
        -days 365 \
        -subj "/C=us/ST=co/O=pingidentity/OU=docker/CN=dev" \
        -addext "subjectAltName=${_sans}" \
        -newkey rsa:2048 \
        -keyout "${_nginxKey}" \
        -out "${_nginxCrt}"
fi

#FIPS generate for ECDSA for testing.
_ECDSAnginxCrt=$(echo "${_nginxCrt}" | sed -e 's/nginx.crt/ECDSA_nginx.crt/')
_ECDSAnginxKey=$(echo "${_nginxKey}" | sed -e 's/nginx.key/ECDSA_nginx.key/')
if test "${_osID}" = "rhel" && ! test -f "${_ECDSAnginxCrt}"; then
    echo "Creating ECDSA Cert for FEDRAMP Purposes."
    _ECDSAnginxCrt=$(echo "${_nginxCrt}" | sed -e 's/nginx.crt/ECDSA_nginx.crt/')
    _ECDSAnginxKey=$(echo "${_nginxKey}" | sed -e 's/nginx.key/ECDSA_nginx.key/')
    sed -i -e 's/#ssl_certificate_key/ssl_certificate_key/g' -e 's/#ssl_certificate/ssl_certificate/g' "${STAGING_DIR}/instance/etc/conf.d/default.conf.subst"
    sed -i -e 's/#ssl_certificate_key/ssl_certificate_key/g' -e 's/#ssl_certificate/ssl_certificate/g' "${STAGING_DIR}/instance/etc/conf.d/default.conf.subst.default"
    openssl req \
        -x509 \
        -nodes \
        -days 365 \
        -subj "/C=us/ST=co/O=pingidentity/OU=docker/CN=dev" \
        -newkey ec -pkeyopt ec_paramgen_curve:secp384r1 \
        -keyout "${_ECDSAnginxKey}" \
        -out "${_ECDSAnginxCrt}"
fi

CERTIFICATE_FILE="${_nginxCrt}"
CERTIFICATE_KEY_FILE="${_nginxKey}"

echo "Using CERTIFICATE_FILE=${CERTIFICATE_FILE}"
echo "Using CERTIFICATE_KEY_FILE=${CERTIFICATE_KEY_FILE}"

#used for FIPS purposes
if test "${_osID}" = "rhel" && test -f "${_nginxCrt}"; then
    ECDSA_CERTIFICATE_FILE=${_ECDSAnginxCrt}
    ECDSA_CERTIFICATE_KEY_FILE="${_ECDSAnginxKey}"

    echo "Using ECDSA CERTIFICATE_FILE=${ECDSA_CERTIFICATE_FILE}"
    echo "Using ECDSA CERTIFICATE_KEY_FILE=${ECDSA_CERTIFICATE_KEY_FILE}"

    export_container_env SECRETS_DIR CERTIFICATE_FILE CERTIFICATE_KEY_FILE ECDSA_CERTIFICATE_FILE ECDSA_CERTIFICATE_KEY_FILE
else
    export_container_env SECRETS_DIR CERTIFICATE_FILE CERTIFICATE_KEY_FILE
fi
